language: python

env:
    global:
        # Set defaults to avoid repeating in most cases
        - ANSWER_VER=pyxsim20

matrix:
    include:

        # Try all python versions with the latest numpy
        - python: 3.7
          env: CMD="py.test pyxsim/tests --answer_dir=$PWD/$ANSWER_VER"; PYTHON='python3'
        - python: 3.8
          env: CMD="py.test pyxsim/tests --answer_dir=$PWD/$ANSWER_VER"; PYTHON='python3'

before_install:

    - wget http://yt-project.org/data/enzo_tiny_cosmology.tar.gz
    - tar -zxvf enzo_tiny_cosmology.tar.gz
    - wget http://yt-project.org/data/GasSloshingLowRes.tar.gz
    - tar -zxvf GasSloshingLowRes.tar.gz
    - wget http://yt-project.org/data/FIRE_M12i_ref11.tar.gz
    - tar -zxvf FIRE_M12i_ref11.tar.gz
    - wget http://hea-www.cfa.harvard.edu/~jzuhone/${ANSWER_VER}.tar.gz
    - tar -zxvf ${ANSWER_VER}.tar.gz		
    - mkdir -p ~/.config/yt
    - printf "[yt]\ntest_data_dir = $PWD" >> $HOME/.config/yt/ytrc
    # Use utf8 encoding. Should be default, but this is insurance against
    # future changes
    - export PYTHONIOENCODING=UTF8
    - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
    - chmod +x miniconda.sh
    - ./miniconda.sh -b
    - export PATH=/home/travis/miniconda2/bin:$PATH
    - conda update --yes conda
    - export YT_DIR=$HOME/yt-git
    - export YAA_DIR=$HOME/yaa-git

    # UPDATE APT-GET LISTINGS
    - sudo apt-get update

install:

    # CONDA
    - conda create --yes -n test python=$TRAVIS_PYTHON_VERSION
    - source activate test

    # CORE DEPENDENCIES
    - conda config --add channels https://conda.anaconda.org/sherpa
    - conda config --add channels conda-forge
    - conda install --yes numpy pytest pip h5py astropy sherpa cython scipy soxs
    - git clone --branch=main https://github.com/yt-project/yt $YT_DIR
    - pushd $YT_DIR
    - pip install -e .
    - popd
    - git clone --branch=main https://github.com/yt-project/yt_astro_analysis $YAA_DIR
    - pushd $YAA_DIR
    - pip install -e .
    - popd

    # COVERAGE DEPENDENCIES
    - pip install coverage coveralls
    - $PYTHON setup.py develop

script:

    - $CMD

after_success:
    - if [[ $PYTHON == 'python3' ]]; then
          coveralls --rcfile='pyxsim/tests/coveragerc';
      fi
